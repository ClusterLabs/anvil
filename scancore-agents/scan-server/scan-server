#!/usr/bin/perl
# 
# This scans the nodes and DR host for VMs 
# 
# NOTE: The data stored here is not bound to a given host. As such, only hosted VMs are processed.
# 
# Examples;
# 
# Exit codes;
# 0 = Normal exit.
# 1 = Startup failure (no DB, bad file read, etc)
# 2 = libvirtd is not running.
# 
# TODO: 
# - 
# 

use strict;
use warnings;
use Anvil::Tools;
use Data::Dumper;

# Disable buffering
$| = 1;

my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

my $anvil = Anvil::Tools->new({log_level => 2, log_secure => 1});
$anvil->Log->level({set => 2});
$anvil->Log->secure({set => 1});

$anvil->data->{scancore}{'scan-server'}{disable} = 0;
$anvil->data->{switches}{force}                   = 0;

$anvil->Storage->read_config();

# Read switches
$anvil->Get->switches;

# If we're disabled and '--force' wasn't used, exit.
if (($anvil->data->{scancore}{'scan-server'}{disable}) && (not $anvil->data->{switches}{force}))
{
	# Exit.
	$anvil->nice_exit({exit_code => 0});
}

# This scan agent only uses core tables (server and definitions).
$anvil->data->{scancore}{'scan-server'}{tables} = [""];

# Handle start-up tasks
my $problem = $anvil->ScanCore->agent_startup({
	debug  => 3,
	agent  => $THIS_FILE,
	tables => $anvil->data->{scancore}{'scan-server'}{tables},
});
if ($problem)
{
	$anvil->nice_exit({exit_code => 1});
}

$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 1, key => "scan_server_log_0001", variables => { program => $THIS_FILE }});

# There are no tables for this agent, so '--purge' is useless here.

# Before we do anything, are we a node or a DR host?
my $host_type = $anvil->Get->host_type;
$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { host_type => $host_type }});
if ($host_type eq "striker")
{
	$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 1, key => "scan_server_log_0002", variables => { host_type => $host_type }});
	$anvil->nice_exit({exit_code => 0});
}

# Read the data.
collect_data($anvil);

# Read last scan


$anvil->nice_exit({exit_code => 0});

#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################


# This reads in all the data we can find on the local system
sub collect_data
{
	my ($anvil) = @_;
	
	# Is 'libvirtd' running?
	my $running = $anvil->System->check_daemon({daemon => "libvirtd"});
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { running => $running }});
	if (not $running)
	{
		$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 2, key => "scan_server_log_0003"});
		$anvil->nice_exit({exit_code => 2});
	}
	
	my ($output, $return_code) = $anvil->System->call({shell_call => $anvil->data->{path}{exe}{virsh}." list --all", source => $THIS_FILE, line => __LINE__});
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 3, list => { output => $output, return_code => $return_code }});
	foreach my $line (split/\n/, $output)
	{
		$line = $anvil->Words->clean_spaces({string => $line});
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { line => $line }});
		
		if ($line =~ /^\d+ (.*?) (.*)$/)
		{
			my $server  = $1;
			my $state = $2;
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 3, list => { 
				server  => $server, 
				'state' => $state, 
			}});
			
			$anvil->data->{'scan-server'}{server}{$server}{'state'}  = $state;
			$anvil->data->{'scan-server'}{server}{$server}{undefine} = 0;
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
				"scan-server::server::${server}::state"    => $anvil->data->{'scan-server'}{server}{$server}{'state'}, 
				"scan-server::server::${server}::undefine" => $anvil->data->{'scan-server'}{server}{$server}{undefine}, 
			}});
		}
		
		if ($line =~ /- (.*?) shut off/)
		{
			# The server is shut off. If this is a node, it shouldn't be defined.
			my $server = $1;
			my $host_type   = $anvil->Get->host_type;
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { host_type => $host_type }});
			if ($host_type eq "node")
			{
				$anvil->data->{'scan-server'}{server}{$server}{undefine} = 1;
				$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
					"scan-server::server::${server}::undefine" => $anvil->data->{'scan-server'}{server}{$server}{undefine}, 
				}});
			}
		}
	}
	
	# Now loop through the found servers and read their XML definition.
	foreach my $server (sort {$a cmp $b} keys %{$anvil->data->{'scan-server'}{server}})
	{
		my ($definition, $return_code) = $anvil->System->call({shell_call => $anvil->data->{path}{exe}{virsh}." dumpxml ".$server, source => $THIS_FILE, line => __LINE__});
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 3, list => { output => $definition, return_code => $definition }});
		
		my $target  = $anvil->Get->short_host_name;
		my $source  = "from_memory";
		my $problem = $anvil->Server->parse_definition({
			debug      => 2,
			server     => $server,
			source     => $source, 
			definition => $definition, 
		});
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { problem => $problem }});
		if ($problem)
		{
			# Wat?
			next;
		}
		
		my $server_uuid = $anvil->data->{server}{$target}{$server}{$source}{info}{uuid};
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 3, list => { server_uuid => $server_uuid }});
		
		# See if this server is in the database.
		my $query = "SELECT COUNT(*) FROM servers WHERE server_uuid = ".$anvil->Database->quote($server_uuid).";";
		my $count = $anvil->Database->query({query => $function_query, source => $THIS_FILE, line => __LINE__})->[0]->[0];
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => $debug, list => { count => $count }});
		if (not $count)
		{
			# Add it.
		}
		
		### TODO: left off here, look for the XML file on disk. If it's not found, write it. 
		my $xml_file = $anvil->data->{path}{directories}{shared}{definitions}."/".$server.".xml";
		if (-e $xml_file)
		{
			$anvil->Storage->get_file_stats({
				debug     => 2,
				file_path => $xml_file,
			});
		}
	}
	
	return(0);
}
