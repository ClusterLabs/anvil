#!/usr/bin/perl
# 
# This is called when the local network needs to be reconfigured.
# 
# Exit codes;
# 0 = Normal exit.
# 1 = Job was already picked up by another running instance.
# 2 = The host name did not update properly.
# 

use strict;
use warnings;
use Data::Dumper;
use Anvil::Tools;

my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

# Turn off buffering so that the pinwheel will display while waiting for the SSH call(s) to complete.
$| = 1;

my $anvil = Anvil::Tools->new();
$anvil->Log->level({set => 2});
$anvil->Log->secure({set => 0});

# Read switches
$anvil->Get->switches;

# Paths
$anvil->Storage->read_config({file => $anvil->data->{path}{config}{'anvil.conf'}});

# Connect
my $connections = $anvil->Database->connect({
	sql_file   => $anvil->data->{sys}{database}{schema},
	test_table => "network_interfaces", 
});

print $THIS_FILE." ".__LINE__."; connections: [".$connections."]\n";
$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 3, key => "log_0132", variables => { connections => $connections }});
if (not $connections)
{
	# No databases, exit.
	print $anvil->Words->string({key => "striker_error_0003"});
	$anvil->nice_exit({exit_code => 2});
}

pickup_job_details($anvil);

reconfigure_network($anvil);

# Set the passwords
my $password = $anvil->data->{variables}{form}{config_step2}{striker_password}{value};
$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, secure => 1, list => { password => $password }});

$anvil->nice_exit({code => 0});

#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

# This does the work of reconfiguring the network
sub reconfigure_network
{
	my ($anvil) = @_;
	
	my $prefix          = $anvil->data->{variables}{form}{config_step1}{prefix}{value};
	my $sequence        = $anvil->data->{variables}{form}{config_step1}{sequence}{value};
	my $domain          = $anvil->data->{variables}{form}{config_step1}{domain}{value};
	my $organization    = $anvil->data->{variables}{form}{config_step1}{organization}{value};
	my $bcn_count       = 1;	# TODO: This should be coming from the form, even though it's only '1' for now.
	my $sn_count        = 0;	# TODO: This should be coming from the form, even though it's always '0' for Strikers.
	my $ifn_count       = $anvil->data->{variables}{form}{config_step1}{ifn_count}{value};
	my $new_hostname    = defined $anvil->data->{variables}{form}{config_step2}{hostname}{value} ? $anvil->data->{variables}{form}{config_step2}{hostname}{value} : $prefix."-striker".sprintf("%02d", $sequence).".".$domain;
	my $pretty_hostname = $organization." - Striker ".sprintf("%02d", $sequence);
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		prefix          => $prefix, 
		sequence        => $sequence,
		domain          => $domain, 
		organization    => $organization, 
		bcn_count       => $bcn_count, 
		ifn_count       => $ifn_count, 
		new_hostname    => $new_hostname, 
		pretty_hostname => $pretty_hostname, 
	}});
	
	# Set the hostname
	my $hostname = $anvil->System->hostname({set => $new_hostname, pretty => $pretty_hostname, debug => 2});
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { hostname => $hostname }});
	if ($hostname eq $new_hostname)
	{
		# Success
		$anvil->{job}{status} .= "message_0016,!!hostname!$new_hostname!!\n";
		$anvil->Database->insert_or_update_jobs({
			job_uuid             => $anvil->{job}{uuid}, 
			update_progress_only => 1, 
			job_progress         => 10, 
			job_status           => $anvil->{job}{status},
		});
		$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 1, key => "message_0016", variables => { hostname => $new_hostname }});
	}
	else
	{
		# Failed
		$anvil->{job}{status} .= "message_0017,!!hostname!$new_hostname!!,!!bad_hostname!$hostname!!\n";
		$anvil->{job}{status} .= "failed\n";
		$anvil->Database->insert_or_update_jobs({
			job_uuid             => $anvil->{job}{uuid}, 
			update_progress_only => 1, 
			job_progress         => 100, 
			job_status           => $anvil->{job}{status},
		});
		$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 0, key => "message_0017", variables => { 
			hostname     => $new_hostname,
			bad_hostname => $hostname,
		}});
		$anvil->nice_exit({code => 2});
	}
	
	# Now configure the network.
	my $dns = defined $anvil->data->{variables}{form}{config_step2}{dns}{value} ? [split/,/, $anvil->data->{variables}{form}{config_step2}{dns}{value}] : [];
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { dns => $dns }});
	for (my $i = 0; $i < @{$dns}; $i++)
	{
		$dns->[$i] = $anvil->Words->clean_spaces({ string => $dns->[$i] });
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { "dns->[$i]" => $dns->[$i] }});
	}
	
	my $gateway           = defined $anvil->data->{variables}{form}{config_step2}{gateway}{value}           ? $anvil->data->{variables}{form}{config_step2}{gateway}{value}           : "";
	my $gateway_interface = defined $anvil->data->{variables}{form}{config_step2}{gateway_interface}{value} ? $anvil->data->{variables}{form}{config_step2}{gateway_interface}{value} : "";
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		gateway           => $gateway, 
		gateway_interface => $gateway_interface, 
	}});
	foreach my $network_type ("bcn", "sn", "ifn")
	{
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { network_type => $network_type }});
		
		my $count = 0;
		if    ($network_type eq "bcn") { $count = $bcn_count; }
		elsif ($network_type eq "sn")  { $count = $sn_count;  }
		elsif ($network_type eq "ifn") { $count = $ifn_count; }
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { count => $count }});
		
		next if not $count;
		foreach my $network_count (1..$count)
		{
			my $this_network = $network_type.$network_count;
			my $link1_key    = $this_network."_iface1_mac";
			my $link2_key    = $this_network."_iface2_mac";
			my $subnet_key   = $this_network."_subnet";
			my $ip_key       = $this_network."_ip";
			my $is_gateway   = $this_network eq $gateway_interface ? 1 : 0;
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
				this_network => $this_network, 
				link1_key    => $link1_key, 
				link2_key    => $link2_key, 
				subnet_key   => $subnet_key, 
				ip_key       => $ip_key, 
				is_gateway   => $is_gateway, 
			}});
			
			# Skip if this doesn't exist or isn't a valid IPv$ address.
			next if not exists $anvil->data->{variables}{form}{config_step2}{$ip_key}{value};
			if (($anvil->data->{variables}{form}{config_step2}{$ip_key}{value}) and (not $anvil->Validate->is_ipv4({ip => $anvil->data->{variables}{form}{config_step2}{$ip_key}{value}})))
			{
				# Something was set, but it isn't valid.
				$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 0, key => "log_0148", variables => { 
					network => $this_network,
					ip      => $anvil->data->{variables}{form}{config_step2}{$ip_key}{value},
				}});
				next;
			}
			
			my $ip     = $anvil->data->{variables}{form}{config_step2}{$ip_key}{value};
			my $subnet = $anvil->data->{variables}{form}{config_step2}{$subnet_key}{value};
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
				ip     => $ip, 
				subnet => $subnet, 
			}});
			
			if ((exists $anvil->data->{variables}{form}{config_step2}{$link2_key}{value}) && ($anvil->Validate->is_mac({mac => $anvil->data->{variables}{form}{config_step2}{$link2_key}{value}})))
			{
				# Bonded
				my $link1_mac = $anvil->data->{variables}{form}{config_step2}{$link1_key}{value};
				my $link2_mac = $anvil->data->{variables}{form}{config_step2}{$link2_key}{value};
				$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
					link1_mac => $link1_mac, 
					link2_mac => $link2_mac, 
				}});
				
				### TODO: Handle when bridges exist. Detect when the host is a node and/or have a "use as bridge" option?
				# Build the configs.
				my $say_network      = "";
				my $say_interface    = "";
				my $interface_prefix = "";
				if ($network_type eq "bcn")
				{
					$say_network      = "Back-Channel Network ".$network_count;
					$say_interface    = "bcn".$network_count;
					$interface_prefix = "BCN";
				}
				elsif ($network_type eq "sn")
				{
					$say_network      = "Storage Network ".$network_count; 
					$say_interface    = "sn".$network_count;
					$interface_prefix = "SN";
				}
				elsif ($network_type eq "ifn")
				{
					$say_network      = "Internet-Facing Network ".$network_count; 
					$say_interface    = "ifn".$network_count;
					$interface_prefix = "IFN";
				}
				my $bond_file     = $anvil->data->{path}{directories}{ifcfg}."/ifcfg-".$interface_prefix."_".$network_count."_-_Bond_1";
				my $link2_file    = $anvil->data->{path}{directories}{ifcfg}."/ifcfg-".$interface_prefix."_".$network_count."_-_Link_2";
				my $link1_file    = $anvil->data->{path}{directories}{ifcfg}."/ifcfg-".$interface_prefix."_".$network_count."_-_Link_1";
				my $bond_uuid     = get_uuid_from_interface_file($anvil, $bond_file);
				my $link2_uuid    = get_uuid_from_interface_file($anvil, $link2_file);
				my $link1_uuid    = get_uuid_from_interface_file($anvil, $link1_file);
				my $say_defroute  = $is_gateway ? "yes" : "no";
				my $cidr          = $anvil->Convert->cidr({subnet => $subnet});
				
				### TODO: Set the firewall Zone appropriately.
				# Build the Bond config.
				my $bond_config =  "# $say_network - Bond 1\n";
				   $bond_config .= "DEVICE=\"".$say_interface."_bond1\"\n";
				   $bond_config .= "NAME=\"".$interface_prefix." ".$network_count." - Bond 1\"\n";
				   $bond_config .= "UUID=\"".$bond_uuid."\"\n";
				   $bond_config .= "BONDING_OPTS=\"mode=active-backup primary=".$say_interface."_link1 updelay=120000 downdelay=0 miimon=100 primary_reselect=better\"\n";
				   $bond_config .= "TYPE=\"Bond\"\n";
				   $bond_config .= "BONDING_MASTER=\"yes\"\n";
				   $bond_config .= "BOOTPROTO=\"none\"\n";
				   $bond_config .= "IPV6INIT=\"no\"\n";
				   $bond_config .= "ONBOOT=\"yes\"\n";
				   $bond_config .= "IPADDR=\"".$ip."\"\n";
				   $bond_config .= $cidr ? "PREFIX=\"".$cidr."\"\n" : "NETMASK=\"".$subnet."\"\n";
				if ($is_gateway)
				{
					$bond_config .= "GATEWAY=\"".$gateway."\"\n";
					for (my $i = 0; $i < @{$dns}; $i++)
					{
						$bond_config .= "DNS".($i+1)."=\"".$dns->[$i]."\"\n";
					}
				}
				$bond_config .= "DEFROUTE=\"".$say_defroute."\"\n";
				$bond_config .= "ZONE=\"".$say_interface."\"";
				$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
					bond_config => $bond_config, 
				}});
				   
				my $link1_config = "";
				my $link2_config = "";
			}
			elsif ((exists $anvil->data->{variables}{form}{config_step2}{$link1_key}{value}) && ($anvil->Validate->is_mac({mac => $anvil->data->{variables}{form}{config_step2}{$link1_key}{value}})))
			{
				# Single
				my $link1_mac = $anvil->data->{variables}{form}{config_step2}{$link1_key}{value};
				$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { link1_mac => $link1_mac }});
			}
			else
			{
				# Doesn't exist, skip.
				$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 0, key => "log_0149", variables => { network => $this_network }});
				next;
			}
		}
	}

	return(0);
}

# This will read a network interface file and return the UUID="x" value. If the file doesn't exist or the 
# UUID was not found, a new UUID is generated and returned.
sub get_uuid_from_interface_file
{
	my ($anvil, $file) = @_;
	$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 2, key => "log_0131", variables => { function => "get_uuid_from_interface_file" }});
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { file => $file }});
	
	my $uuid = "";
	if (-e $file)
	{
		my $body = $anvil->Storage->read_file({file => $file});
		foreach my $line (split/\n/, $body)
		{
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { line => $line }});
			$line =~ s/#.*//;
			if ($line =~ /UUID=\"(.*?)\"/)
			{
				my $test_uuid = $1;
				$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { test_uuid => $test_uuid }});
				if ($anvil->Validate->is_uuid({uuid => $test_uuid}))
				{
					$uuid = $test_uuid;
					$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { uuid => $uuid }});
				}
				last;
			}
		}
	}
	if (not $uuid)
	{
		$uuid = $anvil->Get->uuid();
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { uuid => $uuid }});
	}
	
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 3, list => { uuid => $uuid }});
	return($uuid);
}

# This will pick up the job, or exit.
sub pickup_job_details
{
	my ($anvil) = @_;
	
	# If any job said it was picked up, and the "job_picked_up_by" PID doesn't exist, take it and update
	# it.
	
	my $query = "
SELECT 
    job_uuid, 
    job_command, 
    job_data, 
    job_picked_up_by, 
    job_picked_up_at, 
    job_updated, 
    job_progress 
FROM 
    jobs 
WHERE 
    job_name = 'configure::network' 
AND 
    job_progress != 100 
AND 
    job_host_uuid = ".$anvil->data->{sys}{use_db_fh}->quote($anvil->Get->host_uuid)."
LIMIT 1;";
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { query => $query }});
	
	my $results = $anvil->Database->query({query => $query, source => $THIS_FILE, line => __LINE__});
	my $count   = @{$results};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		results => $results, 
		count   => $count,
	}});
	my $job_uuid         =         $results->[0]->[0];
	my $job_command      =         $results->[0]->[1];
	my $job_data         = defined $results->[0]->[2] ? $results->[0]->[2] : "";
	my $job_picked_up_by =         $results->[0]->[3];
	my $job_picked_up_at =         $results->[0]->[4]; 
	my $job_updated      =         $results->[0]->[5];
	my $job_progress     =         $results->[0]->[6];
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		job_uuid         => $job_uuid,
		job_command      => $job_command,
		job_data         => $job_data,
		job_picked_up_by => $job_picked_up_by,
		job_picked_up_at => $job_picked_up_at,
		job_updated      => $job_updated,
		job_progress     => $job_progress,
	}});
	
	# See if the job was picked up by another running instance.
	if ($job_picked_up_by)
	{
		# Check if the PID is still active.
		$anvil->System->pids({ignore_me => 1});
		
		# Is the PID that picked up the job still alive?
		if (exists $anvil->{pids}{$job_picked_up_by})
		{
			print Dumper $anvil->{pids}{$job_picked_up_by};
			$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 1, key => "log_0146", variables => { pid => $job_picked_up_by }});
			$anvil->nice_exit({code => 1});
		}
		else
		{
			# The previous job is gone, we'll take this over.
			$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 1, key => "log_0147", variables => { 
				pid     => $job_picked_up_by,
				percent => $job_progress, 
			}});
		}
	}
	
	# This will store the variables from the database
	$anvil->data->{variables} = {};
	
	# If we're still alive, pick up the details.
	$results = "";
	$count   = "";
	$query   = "
SELECT 
    variable_name, 
    variable_value 
FROM 
    variables 
WHERE 
    variable_name 
LIKE 
    'form::config_step%' 
AND 
    variable_source_table = 'hosts' 
AND 
    variable_source_uuid = ".$anvil->data->{sys}{use_db_fh}->quote($anvil->Get->host_uuid)."
;";
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { query => $query }});
	
	$results = $anvil->Database->query({query => $query, source => $THIS_FILE, line => __LINE__});
	$count   = @{$results};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 3, list => { 
		results => $results, 
		count   => $count,
	}});
	foreach my $row (@{$results})
	{
		my $this_variable =         $row->[0];
		my $this_value    = defined $row->[1] ? $row->[1] : "";
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 3, list => { 
			this_variable => $this_variable, 
			this_value    => $this_value, 
		}});
		
		$anvil->_make_hash_reference($anvil->data->{variables}, $this_variable, $this_value);
	}
	
	# This will be used when updating the job
	$anvil->{job}{uuid}   = $job_uuid;
	$anvil->{job}{status} = "message_0015\n";
	
	# Record that we've picked up this job.
	$anvil->Database->insert_or_update_jobs({
		job_uuid             => $anvil->{job}{uuid}, 
		update_progress_only => 1, 
		job_progress         => 1, 
		job_status           => $anvil->{job}{status},
	});
	
	return(0);
}
