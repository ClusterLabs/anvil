#!/usr/bin/perl
#
#
#

use strict;
use warnings;
use Anvil::Tools;
use Sys::Virt;

$| = 1;

my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

my $anvil = Anvil::Tools->new();

$anvil->Get->switches({list => ["convert", "job-uuid", "out-file-id", "resize", "request-host-name". "server-uuid'"], man => $THIS_FILE});
$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => $anvil->data->{switches}});

$anvil->Database->connect;
$anvil->Log->entry({ source => $THIS_FILE, line => __LINE__, level => 2, secure => 0, key => "log_0132" });
if (not $anvil->data->{sys}{database}{connections})
{
	# No databases, exit.
	$anvil->Log->entry({ source => $THIS_FILE, line => __LINE__, level => 0, 'print' => 1, priority => "err", key => "error_0003" });
	$anvil->nice_exit({ exit_code => 1 });
}

# Try to get a job UUID if not given.
if (not $anvil->data->{switches}{'job-uuid'})
{
	$anvil->data->{switches}{'job-uuid'} = $anvil->Job->get_job_uuid({ program => $THIS_FILE });
	$anvil->Log->variables({ source => $THIS_FILE, line => __LINE__, level => 2, list => {
		"switches::job-uuid" => $anvil->data->{switches}{'job-uuid'}
	} });
}

# Handle this script as a job when job UUID is provided.
if ($anvil->data->{switches}{'job-uuid'})
{
	$anvil->Job->clear();
	$anvil->Job->get_job_details();
	$anvil->Job->update_progress({
		progress         => 1,
		job_picked_up_by => $$,
		job_picked_up_at => time,
		message          => "message_0263"
	});

	foreach my $line (split/\n/, $anvil->data->{jobs}{job_data})
	{
		my ($variable, $value) =  ($line =~ /^(.*)=(.*)$/);
		   $value              =~ s/^"(.*)\"/$1/;
		   $value              =~ s/^'(.*)\'/$1/;
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			's1:line'     => $line, 
			's2:variable' => $variable, 
			's3:value'    => $value, 
		}});
		
		$anvil->data->{switches}{$variable} = $value;
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			"switches::${variable}" => $anvil->data->{switches}{$variable}, 
		}});
	}
}

my $is_convert        = $anvil->data->{switches}{'convert'};
my $job_uuid          = $anvil->data->{switches}{'job-uuid'};
my $out_file_id       = $anvil->data->{switches}{'out-file-id'};
my $resize_args       = $anvil->data->{switches}{'resize'};
my $request_host_name = $anvil->data->{switches}{'request-host-name'};
my $server_uuid       = $anvil->data->{switches}{'server-uuid'};
$anvil->Log->variables({ source => $THIS_FILE, line => __LINE__, level => 2, list => {
	is_convert        => $is_convert, 
	job_uuid          => $job_uuid, 
	out_file_id       => $out_file_id, 
	resize_args       => $resize_args, 
	request_host_name => $request_host_name, 
	server_uuid       => $server_uuid, 
}});

$out_file_id = ((defined $out_file_id) && ($out_file_id ne "#!SET!#")) ? "_".$out_file_id : "";
$anvil->Log->variables({ source => $THIS_FILE, line => __LINE__, level => 2, list => { out_file_id => $out_file_id }});

if ($server_uuid)
{
	my $out_file_path = $anvil->data->{path}{directories}{tmp}."/".$server_uuid."_screenshot".$out_file_id;
	$anvil->Log->variables({ source => $THIS_FILE, line => __LINE__, level => 2, list => { out_file_path => $out_file_path }});

	if ($is_convert)
	{
		my ($return_code, $encoded_image) = convert_server_screenshot({
			resize_args => $resize_args,
			source_file => $out_file_path,
		});
		$anvil->Log->variables({ source => $THIS_FILE, line => __LINE__, level => 2, list => { return_code => $return_code }});

		print($encoded_image) if ($return_code == 0);

		$anvil->nice_exit({ exit_code => $return_code });
	}

	my ($return_code) = get_server_screenshot({
		output_file => $out_file_path,
		server_uuid => $server_uuid,
	});
	$anvil->Log->variables({ source => $THIS_FILE, line => __LINE__, level => 2, list => { return_code => $return_code }});

	if ($return_code > 0)
	{
		$anvil->Job->update_progress({ progress => 100, message => "message_0265" });

		$anvil->nice_exit({ exit_code => 1 });
	}

	if ($request_host_name)
	{
		chomp $request_host_name;

		foreach my $host_name ( split(/,/, $request_host_name) )
		{
			my $shell_call = $anvil->data->{path}{exe}{rsync}." -e \"ssh -o BatchMode=yes\" -ac '".$out_file_path."' '".$host_name."':'".$out_file_path."'";
			$anvil->Log->variables({ source => $THIS_FILE, line => __LINE__, level => 2, list => {
				host_name  => $host_name,
				shell_call => $shell_call,
			} });

			system_call({shell_call => $shell_call });
		}
	}

	$anvil->Job->update_progress({ progress => 100, message => "message_0264" });
}
else
{
	$anvil->Job->update_progress({ progress => 100, message => "message_0266" });

	$anvil->nice_exit({ exit_code => 1 });
}

$anvil->nice_exit({ exit_code => 0 });


#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

sub convert_server_screenshot
{
	my $parameters  = shift;
	my $resize_args = $parameters->{resize_args};
	my $source_file = $parameters->{source_file};

	my $host_type = $anvil->Get->host_type();

	return (1) if ( ($host_type ne "striker") || (not -e $source_file) );

	my $base64   = $anvil->data->{path}{exe}{base64};
	my $pamscale = $anvil->data->{path}{exe}{pamscale};
	my $pamtopng = $anvil->data->{path}{exe}{pamtopng};

	my $shell_call = "cat $source_file";

	if ( (defined $resize_args) && ($resize_args =~ /^\d+x\d+$/) )
	{
		my ($resize_x, $resize_y) = split(/x/ , $resize_args);

		$shell_call .= " | ".$pamscale." -quiet -xyfit ".$resize_x $resize_y;
	}

	$shell_call .= " | ".$pamtopng." -quiet | ".$base64." --wrap 0";

	my ($output, $return_code) = system_call({shell_call => $shell_call });

	return ($return_code, $output);
}

sub get_server_screenshot
{
	my $parameters  = shift;
	my $output_file = $parameters->{output_file};
	my $server_uuid = $parameters->{server_uuid};

	return (1) if ( (not $server_uuid) || (not $output_file) );

	my $setsid = $anvil->data->{path}{exe}{setsid};
	my $virsh  = $anvil->data->{path}{exe}{virsh};

	my $shell_call = $anvil->data->{path}{exe}{setsid}." --wait ".$anvil->data->{path}{exe}{virsh}." --quiet screenshot --domain ".$server_uuid." --file ".$output_file;

	my ($output, $return_code) = system_call({shell_call => $shell_call });

	return ($return_code, $output);
}

sub system_call
{
	my $parameters = shift;

	my @call_result = $anvil->System->call($parameters);
	my ($output, $return_code) = @call_result;
	$anvil->Log->variables({ source => $THIS_FILE, line => __LINE__, level => 2, list => {
		%{$parameters},
		output      => $output,
		return_code => $return_code,
	} });

	return @call_result;
}
