#!/usr/bin/perl

use Getopt::Long;
use LWP::UserAgent;
use SNMP;
use Net::SNMP;
use JSON::XS;
use Data::Dumper;

=head2 scan_snmp_by_ip

Scans an IP address for SNMP information.

Uses hashes of predefined OIDs to check for Vendor/Model information. If it
does not find Vendor/Model information from those hashes, try to parse that
information from sysDescr.

=head2 Parameters;

=head3 ip
An IP address to scan.

=head3 port (optional)
The SNMP port to scan. Defaults to 161.

=cut
sub scan_snmp_by_ip {
  my $parameter = shift;
  my $ip = defined $parameter->{ip} ? $parameter->{ip} : "";
  my $port = defined $parameter->{port} ? $parameter->{port} : 161;
  my $vendors = defined $parameter->{vendors} ? $parameter->{vendors} : ();
  my $baseOID = "1.3.6.1.2.1"; # mib-2
  my $enterpriseOID = "1.3.6.1.4.1";
  my $vendor = "";
  my $model = "";
  my $name = "";
  my $type = "Unknown";

  my $model_list = get_model_list();

  my ($session, $error) = Net::SNMP->session(
    Hostname => $ip,
    Port => $port,
    Version => "snmpv2c",
    Community => "public"
  );

  # Get mib-2 system data.
  my $system = get_snmp_table({session=> $session, oid => "$baseOID.1"});

  # Use the sysDescr if the vendor or model is blank or unknown.
  my @desc = split(/\s+/, $system->{sysDescr}[0]);

  if ($system->{sysObjectID}[0] =~ /$enterpriseOID/) {
    my @parts = split(/\./, $system->{sysObjectID}[0]);
    $vendor = $vendors->{$parts[6]}->{vendor} if ($parts[6]);
  }

  # The vendor is likely the first word in sysDescr, separated by white space.
  if (!$vendor || $vendor eq "Unknown") {
    $vendor = $desc[0];
  }

  foreach my $model_obj (@{$model_list}) {
    my $check_id = exists($model_obj->{sysObjectID});
    my $found_id = $check_id && ($system->{sysObjectID}[0] eq $enterpriseOID . "." . $model_obj->{sysObjectID});
    my $all_match = 0;
    if ($found_id || !$check_id) {
      my $found_matches = 0;
      my @matches = @{$model_obj->{matches}};
      foreach my $match (@matches) {
        my $var = get_snmp_var({session => $session, oid => $match->{oid}});
	if ($var =~ /$match->{value}/) {
          $found_matches++;
	} else {
          last;
	}
      }
      $all_match = ($found_matches == scalar(@matches));
    }
    if ((!$check_id || ($check_id && $found_id)) && $all_match) {
      $model = $model_obj->{name};
      $type = $model_obj->{type} if $model_obj->{type};
    }
  }

  $name = $system->{sysName}[0];

  # If the model is not known, get the rest of sysDescr, cutting out anything
  # after a parenthesis or dash. In more simple SNMP data, this will be the
  # model information.
  #if (!$model || $model eq "Unknown") {
  # my $descFull = join(" ", @desc[1..$#desc]);
  # my @modelSplit = split(/(\(|-)/, $descFull);
  # $model = @modelSplit[0];
  #}

  $session->close();

  print("IP: $ip\nVendor: $vendor\nModel: $model\nType: $type\n");
}

=head2 get_snmp_table

Gets an SNMP table using Net::SNMP. Gets the MIB human-readable name of each
OID from the SNMP library. Puts instance data into an array, instead of leaving
it as .0, .1, .2, and etc...

=head2 Parameters;

=head3 session
A Net::SNMP session.

=head3 oid
The base OID to scan from.

=cut
sub get_snmp_table {
  my $parameter = shift;
  my $session = defined $parameter->{session} ? $parameter->{session} : ();
  my $oid = defined $parameter->{oid} ? $parameter->{oid} : ();
  my $systemTable = $session->get_table(Baseoid => $oid);
  my %system;

  foreach my $key (keys(%{$systemTable})) {
    my $keyName = SNMP::translateObj($key); # Translates the OID to human-readable format through an MIB.
    my @keys = split(/\./, $keyName); # Extracts just the key name without the extra instance number.
    if (scalar(@keys) > 0) {
      $keyName = $keys[0];
    }
    $system{$keyName} = $system{$keyName} || [];
    push @{$system{$keyName}}, $systemTable->{$key}; # adds each instance to an array instead.
  }

  return \%system;
}

=head2 get_snmp_var

Gets a single variable from a full OID.

=head2 Parameters;

=head3 session
A Net::SNMP session.

=head3 oid
The full OID to get a variable for.

=cut
sub get_snmp_var {
  my $parameter = shift;
  my $session = defined $parameter->{session} ? $parameter->{session} : ();
  my $oid = defined $parameter->{oid} ? $parameter->{oid} : ();

  $session->get_request(Varbindlist => [$oid]);

  if (!defined($session->var_bind_list)) {
    return "";
  } else {
    my $var = $session->var_bind_list->{$oid};
    # If the OID is not full or does not exist, it will be one of these two errors.
    if ($var eq "noSuchObject" || $var eq "noSuchInstance") {
      return "";
    } else {
      return $var;
    }
  }
}

sub get_model_list {
  my $json_text = "";
  open(my $fh, '<:utf8', '/usr/sbin/anvil/snmp-models.json');
  while (my $row = <$fh>) {
    chomp $row;
    $json_text .= $row;
  }
  my $model_list = decode_json($json_text);
  if (!$model_list || !(exists($model_list->{models}))) {
    $model_list = { models => [] };
  }
  return $model_list->{models};
}

sub get_vendor_list {
  my %vendors;

  if (open(my $fh, '<:utf8', '/usr/sbin/anvil/snmp-vendors.txt')) {
    while (my $row = <$fh>) {
      chomp $row;
      my @vendor = split(/\t\t/, $row);
      $vendors{$vendor[0]} = {enterprise_id => $vendor[0], vendor => $vendor[1]};
    }

    return \%vendors;
  } else {
    return update_vendor_list();
  }
}

sub update_vendor_list {
  my $enterprise_lookup = "https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers";
  my $ua = LWP::UserAgent->new( ssl_opts => { verify_hostname => 0 } );
  my $response = $ua->get($enterprise_lookup);
  my $content = (split(/\| \| \| \|/, $response->decoded_content))[-1];
  my @vendorsText = split(/\n/, $content);
  shift @vendorsText;
  my $vendors = {};
  my @categories = ('enterprise_id', 'vendor');
  my $category = 0;
  my $currentId = 0;
  foreach my $i (0 .. scalar(@vendorsText)) {
    my $str = trim($vendorsText[$i]);
    if ($str =~ /^[0-9,.E]+$/) {
      $category = 0;
      $currentId = $str;
    } else {
      $category++;
    }
    my $vendor = $vendors->{$currentId};
    if (!$vendor) {
      $vendor = {};
      $vendors->{$currentId} = $vendor;
    }
    my $categoryName = $categories[$category];
    $vendor->{$categoryName} = $str if ($category < scalar(@categories));
  }
  open(my $fh, '>:utf8', 'snmp-vendors.txt');
  my @vendorValues = sort { $a->{enterprise_id} <=> $b->{enterprise_id} } values(%{$vendors});
  foreach my $vendor (@vendorValues) {
    print $fh "$vendor->{enterprise_id}\t\t$vendor->{vendor}\n";
  }
  close $fh;
  return $vendors;
}

sub trim {
  my $str = $_[0];
  $str =~ s/^\s+|\s+$//g;
  return $str;
}

my $ip = "";
my $port = 161;
my $update_vendors = 0;
my $vendors;
GetOptions("ip=s" => \$ip, "port=i" => \$port, "update-vendors" => \$update_vendors);
my $proper_input = $ip || $update_vendors;

if ($update_vendors) {
  $vendors = update_vendor_list();
} elsif ($proper_input) {
  $vendors = get_vendor_list();
}
scan_snmp_by_ip({ip => $ip, port => $port, vendors => $vendors}) if ($ip);
print("Usage: ./snmp-scan --ip 127.0.0.1 --port 161\n") unless ($proper_input);
