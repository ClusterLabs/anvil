#!/usr/bin/perl
# 
# This program relocates a server from one node to another.
# 
# Exit codes;
# 0 = Normal exit.
# 1 = No database connection.
# 
# TODO: 
# - Update the target_ip search to use the new Network->find_target_ip().

use strict;
use warnings;
use Anvil::Tools;
require POSIX;
use Text::Diff;
use Data::Dumper;

my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

# Turn off buffering so that the pinwheel will display while waiting for the SSH call(s) to complete.
$| = 1;

my $anvil = Anvil::Tools->new();

# Read switches
$anvil->Get->switches({list => [
	"confirm", 
	"anvil", 
	"server", 
	"storage-group", 
	], man => $THIS_FILE});
$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => $anvil->data->{switches}});
$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 2, key => "log_0115", variables => { program => $THIS_FILE }});

# Connect to the database(s). If we have no connections, we'll proceed anyway as one of the 'run_once' tasks
# is to setup the database server.
$anvil->Database->connect();
$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 3, secure => 0, key => "log_0132"});
if (not $anvil->data->{sys}{database}{connections})
{
	# No databases, update the job, sleep for a bit and then exit. The daemon will pick it up and try 
	# again after we exit.
	$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, 'print' => 1, level => 0, priority => "err", key => "error_0305"});
	sleep 10;
	$anvil->nice_exit({exit_code => 1});
}

### Process;
#  1. Verify that there's enough resources on the target to host the server
#  2. Is the server stopped or running?
#  3.1. Stopped;
#  3.2. Check the CPU config in the source XML and for each '<feature policy='require' name='xxx'/>', verify 
#       that xxx is available on the target's /proc/cpuflags. If any don't exist, ask the user to confirm 
#       their removal, or switch to 'host-copy'.
#  4.1. Running;
#  4.2. Check the CPU config in the source XML and for each '<feature policy='require' name='xxx'/>', verify 
#       that xxx is available on the target's /proc/cpuflags. If any don't exist, abort the migration and tell
#       the user they need to change the CPU and reboot, or do a cold migration. 
#  5. Copy the XML definition file to the target
#  6. Create the DRBD resource on the target.
#  7. Make a snapshot of the source.
#  8.1. Stopped;
#  8.2. Use dd directly from the source to the destination DRBD resource.
#  9.1. Running;
#  9.2. Use; virsh migrate --undefinesource --p2p --live --persistent --verbose --copy-storage-all <server_name> qemu+ssh://10.201.12.1/system
# 10. Verify the source is undefined on the old host
# 4. Mark the server status as 'relocating'.



$anvil->nice_exit({exit_code => 0});


#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################
