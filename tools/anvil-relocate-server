#!/usr/bin/perl
# 
# This program relocates a server from one node to another.
# 
# Exit codes;
# 0 = Normal exit.
# 1 = No database connection.
# 
# TODO: 
# - Update the target_ip search to use the new Network->find_target_ip().

use strict;
use warnings;
use Anvil::Tools;
require POSIX;
use Text::Diff;
use Data::Dumper;
use Term::Cap;

my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

# Turn off buffering so that the pinwheel will display while waiting for the SSH call(s) to complete.
$| = 1;

my $anvil = Anvil::Tools->new();

# Read switches
$anvil->Get->switches({list => [
	"anvil", 
	"confirm", 
	"no-boot", 
	"no-snapshot", 
	"server", 
	"storage-group", 
	"update-cpu", 
	], man => $THIS_FILE});
$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => $anvil->data->{switches}});
$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 2, key => "log_0115", variables => { program => $THIS_FILE }});

# Connect to the database(s). If we have no connections, we'll proceed anyway as one of the 'run_once' tasks
# is to setup the database server.
$anvil->Database->connect();
$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 3, secure => 0, key => "log_0132"});
if (not $anvil->data->{sys}{database}{connections})
{
	# No databases, update the job, sleep for a bit and then exit. The daemon will pick it up and try 
	# again after we exit.
	$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, 'print' => 1, level => 0, priority => "err", key => "error_0305"});
	sleep 10;
	$anvil->nice_exit({exit_code => 1});
}

### Process;
#  1. Verify that there's enough resources on the target to host the server
#  2. Is the server stopped or running?
#  3.1. Stopped;
#  3.2. Check the CPU config in the source XML and for each '<feature policy='require' name='xxx'/>', verify 
#       that xxx is available on the target's /proc/cpuflags. If any don't exist, ask the user to confirm 
#       their removal, or switch to 'host-copy'.
#  4.1. Running;
#  4.2. Check the CPU config in the source XML and for each '<feature policy='require' name='xxx'/>', verify 
#       that xxx is available on the target's /proc/cpuflags. If any don't exist, abort the migration and tell
#       the user they need to change the CPU and reboot, or do a cold migration. 
#  5. Copy the XML definition file to the target
#  6. Create the DRBD resource on the target.
#  7. Make a snapshot of the source.
#  8. Remove the DR, if applicable
#  9.1. Stopped;
#  9.2. Use dd directly from the source to the destination DRBD resource.
# 10.1. Running;
# 10.2. Use; virsh migrate --undefinesource --p2p --live --persistent --verbose --copy-storage-all <server_name> qemu+ssh://10.201.12.1/system
# 11. Verify the source is undefined on the old host
# 12. Remove the server from the old host. 
# 13. If needed and possible, recreate the DR 
# 14. Mark the server status as 'relocating'.
if ($anvil->data->{switches}{'job-uuid'})
{
	load_job($anvil);
}

# Is the server valid and running here?
$anvil->Database->get_hosts({debug => 2});
$anvil->Database->get_servers({debug => 2});

# Convert the server to a name and UUID.
if ($anvil->data->{switches}{server})
{
	$anvil->Get->server_from_switch({
		debug  => 2,
		server => $anvil->data->{switches}{server}, 
	});
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		"switches::server_name" => $anvil->data->{switches}{server_name},
		"switches::server_uuid" => $anvil->data->{switches}{server_uuid}, 
	}});
}
else
{
	$anvil->data->{switches}{server_name} = "" if not defined $anvil->data->{switches}{server_name};
	$anvil->data->{switches}{server_uuid} = "" if not defined $anvil->data->{switches}{server_uuid};
}

if ($anvil->data->{switches}{'job-uuid'})
{
	if ((not $anvil->data->{switches}{server_name}) or (not $anvil->data->{switches}{server_uuid}))
	{
		# The server was not found.
		$anvil->Job->update_progress({
			file       => $THIS_FILE, 
			line       => __LINE__, 
			log_level  => 1, 
			'print'    => 1, 
			progress   => 100,
			message    => "log_0856", 
			job_status => "failed", 
			variables  => {
				server => $anvil->data->{switches}{server}, 
			}
		});
		$anvil->nice_exit({exit_code => 1});
	}
	
	# Is the server on this host? 
	my $host_type = $anvil->Get->host_type({debug => 2});
	my $host_uuid = $anvil->Get->host_uuid({debug => 2});
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		host_type => $host_type,
		host_uuid => $host_uuid, 
	}});
	if ($host_type ne "node")
	{
		# This is not a subnode. This job has nothing to do on this host. Was the job assigned improperly?
		$anvil->Job->update_progress({
			file       => $THIS_FILE, 
			line       => __LINE__, 
			log_level  => 1, 
			'print'    => 1, 
			progress   => 100,
			message    => "log_0851", 
			job_status => "failed", 
		});
		$anvil->nice_exit({exit_code => 1});
	}
	
	if (not $anvil->data->{switches}{server})
	{
		# No server was specified to relocate.
		$anvil->Job->update_progress({
			file       => $THIS_FILE, 
			line       => __LINE__, 
			log_level  => 1, 
			'print'    => 1, 
			progress   => 100,
			message    => "log_0861", 
			job_status => "failed", 
		});
		$anvil->nice_exit({exit_code => 1});
	}
	
	
	
	### TODO: ...
	# Is the server on this node?
}
else
{
	# Interactive mode.
	interactive_question($anvil);
}

$anvil->nice_exit({exit_code => 0});


#############################################################################################################
# Functions                                                                                                 #
#############################################################################################################

sub interactive_question
{
	my ($anvil) = @_;
	
	my $termios = new POSIX::Termios;
	$termios->getattr;
	my $ospeed = $termios->getospeed;
	
	my $terminal = Tgetent Term::Cap { TERM => undef, OSPEED => $ospeed };
	$terminal->Trequire(qw/ce ku kd/);
	
	ask_which_server($anvil, $terminal);
	ask_target_anvil($anvil, $terminal);
	
	return(0);
}

sub ask_target_anvil
{
	my ($anvil, $terminal) = @_;
	
	$anvil->Database->get_drbd_data({debug => 2});
	$anvil->Get->cpu_flags({debug => 2});
	#$anvil->Database->get_storage_group_data({debug => 2});
	my $server_uuid       = $anvil->data->{relocate}{server_uuid};
	my $server_name       = $anvil->data->{relocate}{server_name};
	my $server_state      = $anvil->data->{servers}{server_uuid}{$server_uuid}{server_state};
	my $server_anvil_uuid = $anvil->data->{servers}{server_uuid}{$server_uuid}{server_anvil_uuid};
	my $short_host_name   = $anvil->Get->short_host_name;
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		's1:server_uuid'       => $server_uuid, 
		's2:server_name'       => $server_name, 
		's3:server_state'      => $server_state, 
		's4:server_anvil_uuid' => $server_anvil_uuid, 
		's5:short_host_name'   => $short_host_name, 
	}});
	
	# How much disk space, RAM and CPU does the server have, and which targets have enough space?
	my $server_definition = $anvil->data->{servers}{server_uuid}{$server_uuid}{server_definition_xml};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { server_definition => $server_definition }});
	
	my $problem = $anvil->Server->parse_definition({
		debug      => 2,
		server     => $server_name,
		source     => "from_db", 
		definition => $server_definition, 
		anvil_uuid => $server_anvil_uuid,
	});
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { problem => $problem }});
	
	print $terminal->Tputs('cl');
	print "We will relocate: [".$anvil->data->{relocate}{server_name}."] (".$anvil->data->{relocate}{server_uuid}.")\n";
	$anvil->data->{relocate}{cpu_cores_needed} = $anvil->data->{server}{$short_host_name}{$server_name}{from_db}{cpu}{total_cores};
	$anvil->data->{relocate}{ram_needed}       = $anvil->data->{servers}{server_uuid}{$server_uuid}{server_configured_ram} > $anvil->data->{servers}{server_uuid}{$server_uuid}{server_ram_in_use} ? $anvil->data->{servers}{server_uuid}{$server_uuid}{server_configured_ram} : $anvil->data->{servers}{server_uuid}{$server_uuid}{server_ram_in_use};
	$anvil->data->{relocate}{needed_storage}   = 0;
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		"relocate::cpu_cores_needed" => $anvil->data->{relocate}{cpu_cores_needed}, 
		"relocate::ram_needed"       => $anvil->data->{relocate}{ram_needed}." (".$anvil->Convert->bytes_to_human_readable({'bytes' => $anvil->data->{relocate}{ram_needed}}).")", 
	}});
	print "Server: [".$server_name."] needs: [".$anvil->data->{relocate}{cpu_cores_needed}."] CPU Cores and: [".$anvil->Convert->bytes_to_human_readable({'bytes' => $anvil->data->{relocate}{ram_needed}})."] of RAM.\n";
	foreach my $flag (sort {$a cmp $b} keys %{$anvil->data->{server}{$short_host_name}{$server_name}{from_db}{cpu}{feature}})
	{
		my $is_required = $anvil->data->{server}{$short_host_name}{$server_name}{from_db}{cpu}{feature}{$flag};
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 3, list => { 
			flag        => $flag, 
			is_required => $is_required,
		}});
		# I think we can ignore vmx flags.
		next if $flag =~ /^vmx/;
		if ($is_required eq "require")
		{
			$anvil->data->{relocate}{cpu_flag}{$flag} = 1;
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
				"relocate::cpu_flag::${flag}" => $anvil->data->{relocate}{cpu_flag}{$flag},
			}});
		}
	}
	my $say_needed_flags    = "";
	my $required_flag_count = keys %{$anvil->data->{relocate}{cpu_flag}};
	foreach my $flag (sort {$a cmp $b} keys %{$anvil->data->{relocate}{cpu_flag}})
	{
		$say_needed_flags .= $flag." ";
	}
	$say_needed_flags =~ s/ $//;
	#print "The target Anvil! must offer the CPU flags: [".$say_needed_flags."]\n";
	print "- The target Anvil! must offer: [".$required_flag_count."] CPU flags\n";
	foreach my $volume (sort {$a <=> $b} keys %{$anvil->data->{drbd}{config}{$short_host_name}{resource}{$server_name}{volume}})
	{
		my $disk = $anvil->data->{drbd}{config}{$short_host_name}{resource}{$server_name}{volume}{$volume}{drbd_path_by_res};
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			"s1:volume" => $volume, 
			"s2:disk"   => $disk, 
		}});
		
		$anvil->data->{relocate}{volume}{$volume}{needed_storage} = 0;
		foreach my $host (sort {$a cmp $b} keys %{$anvil->data->{drbd}{host_name}})
		{
			next if not exists $anvil->data->{drbd}{host_name}{$host}{resource_name}{$server_name};
			my $volume_size = $anvil->data->{drbd}{host_name}{$host}{resource_name}{$server_name}{volume}{$volume}{volume_size};
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
				host        => $host, 
				volume_size => $volume_size." (".$anvil->Convert->bytes_to_human_readable({'bytes' => $volume_size}).")", 
			}});
			if ($volume_size > $anvil->data->{relocate}{volume}{$volume}{needed_storage})
			{
				$anvil->data->{relocate}{volume}{$volume}{needed_storage} = $volume_size;
				$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
					"relocate::volume::${volume}::needed_storage" => $anvil->data->{relocate}{volume}{$volume}{needed_storage}." (".$anvil->Convert->bytes_to_human_readable({'bytes' => $anvil->data->{relocate}{volume}{$volume}{needed_storage}}).")", 
				}});
			}
		}
		
		$anvil->data->{relocate}{needed_storage} += $anvil->data->{relocate}{volume}{$volume}{needed_storage};
		print "- Volume: [".$volume."] needs: [".$anvil->Convert->bytes_to_human_readable({'bytes' => $anvil->data->{relocate}{volume}{$volume}{needed_storage}})."]\n";
	}
	print "- Total storage needed: [".$anvil->Convert->bytes_to_human_readable({'bytes' => $anvil->data->{relocate}{needed_storage}})."]\n";
	
	# Now find candidate subnodes.
	print "\n";
	my $candidate_count = 0;
	foreach my $anvil_name (sort {$a cmp $b} keys %{$anvil->data->{anvils}{anvil_name}})
	{
		my $anvil_uuid = $anvil->data->{anvils}{anvil_name}{$anvil_name}{anvil_uuid};
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			"s1:anvil_name" => $anvil_name,
			"s2:anvil_uuid" => $anvil_uuid,  
		}});
		next if $anvil_uuid eq $server_anvil_uuid;
		$anvil->data->{relocate}{anvil_name}{$anvil_name}{anvil_uuid} = $anvil_uuid;
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			"relocate::anvil_name::${anvil_name}:anvil_uuid" => $anvil->data->{relocate}{anvil_name}{$anvil_name}{anvil_uuid}, 
		}});
		
		$anvil->Get->available_resources({
			debug      => 2, 
			anvil_uuid => $anvil_uuid, 
		});
		
		my $sufficient_cpu     = 0;
		my $sufficient_ram     = 0;
		my $sufficient_disk    = 0;
		my $cpu_flags_ok       = 1;
		my $available_cores    = $anvil->data->{anvil_resources}{$anvil_uuid}{cpu}{available}; 
		my $available_ram      = $anvil->data->{anvil_resources}{$anvil_uuid}{ram}{available}; 
		my $subnode1_host_uuid = $anvil->data->{anvils}{anvil_uuid}{$anvil_uuid}{anvil_node1_host_uuid};
		my $subnode1_host_name = $anvil->data->{hosts}{host_uuid}{$subnode1_host_uuid}{short_host_name};
		my $subnode2_host_uuid = $anvil->data->{anvils}{anvil_uuid}{$anvil_uuid}{anvil_node2_host_uuid};
		my $subnode2_host_name = $anvil->data->{hosts}{host_uuid}{$subnode2_host_uuid}{short_host_name};
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			"s1:available_cores"    => $available_cores, 
			"s2:available_ram"      => $available_ram." (".$anvil->Convert->bytes_to_human_readable({'bytes' => $available_ram}).")", 
			"s3:subnode1_host_uuid" => $subnode1_host_uuid, 
			"s4:subnode1_host_name" => $subnode1_host_name, 
			"s5:subnode2_host_uuid" => $subnode2_host_uuid, 
			"s6:subnode2_host_name" => $subnode2_host_name, 
		}});
		$anvil->data->{relocate}{anvil_name}{$anvil_name}{available_cores} = $available_cores;
		$anvil->data->{relocate}{anvil_name}{$anvil_name}{available_ram}   = $available_ram;
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			"relocate::anvil_name::${anvil_name}:available_cores" => $anvil->data->{relocate}{anvil_name}{$anvil_name}{available_cores}, 
			"relocate::anvil_name::${anvil_name}:available_ram"   => $anvil->data->{relocate}{anvil_name}{$anvil_name}{available_ram}, 
		}});
		
		foreach my $flag (sort {$a cmp $b} keys %{$anvil->data->{relocate}{cpu_flag}})
		{
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { flag => $flag }});
			if (not $anvil->data->{cpu_flags}{$subnode1_host_uuid}{flag}{$flag})
			{
				$cpu_flags_ok = 0;
				#print "- The required CPU flag: [".$flag."] not on subnode: [".$subnode1_host_name."]\n";
			}
			elsif (not $anvil->data->{cpu_flags}{$subnode2_host_uuid}{flag}{$flag})
			{
				$cpu_flags_ok = 0;
				#print "- The required CPU flag: [".$flag."] not on subnode: [".$subnode2_host_name."]\n";
			}
		}
		
		#print "- Anvil: [".$anvil_name."], Description: [".$anvil_description."]\n";
		#print " |- Available cores: [".$available_cores."], RAM: [".$anvil->Convert->bytes_to_human_readable({'bytes' => $available_ram})."]\n";
		if ($available_cores > $anvil->data->{relocate}{cpu_cores_needed})
		{
			$sufficient_cpu = 1;
		}
		if ($available_ram > $anvil->data->{relocate}{ram_needed})
		{
			$sufficient_ram = 1;
		}
		foreach my $storage_group_name (sort {$a cmp $b} keys %{$anvil->data->{storage_groups}{anvil_uuid}{$anvil_uuid}{storage_group_name}})
		{
			my $storage_group_uuid = $anvil->data->{storage_groups}{anvil_uuid}{$anvil_uuid}{storage_group_name}{$storage_group_name}{storage_group_uuid};
			my $free_size          = $anvil->data->{anvil_resources}{$anvil_uuid}{storage_group}{$storage_group_uuid}{free_size};
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
				"s1:storage_group_name" => $storage_group_name,
				"s2:storage_group_uuid" => $storage_group_uuid, 
				"s3:free_size"          => $free_size." (".$anvil->Convert->bytes_to_human_readable({'bytes' => $free_size}).")", 
			}});
			
			$anvil->data->{relocate}{anvil_name}{$anvil_name}{storage_group}{$storage_group_name}{storage_group_uuid} = $storage_group_uuid;
			$anvil->data->{relocate}{anvil_name}{$anvil_name}{storage_group}{$storage_group_name}{free_size}          = $free_size;
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
				"s1:relocate::anvil_name::${anvil_name}:storage_group::${storage_group_name}::storage_group_uuid" => $anvil->data->{relocate}{anvil_name}{$anvil_name}{storage_group}{$storage_group_name}{storage_group_uuid}, 
				"s2:relocate::anvil_name::${anvil_name}:storage_group::${storage_group_name}::free_size"          => $anvil->data->{relocate}{anvil_name}{$anvil_name}{storage_group}{$storage_group_name}{free_size}." (".$anvil->Convert->bytes_to_human_readable({'bytes' => $anvil->data->{relocate}{anvil_name}{$anvil_name}{storage_group}{$storage_group_name}{free_size}}).")", 
			}});
			#print " |- Storage group: [".$storage_group_name."], free space: [".$anvil->Convert->bytes_to_human_readable({'bytes' => $free_size})."]\n";
			if ($free_size > $anvil->data->{relocate}{needed_storage})
			{
				$sufficient_disk = 1;
			}
		}
		if (($sufficient_cpu) && ($sufficient_ram) && ($sufficient_disk) && ($cpu_flags_ok))
		{
			#print " \\- This node can host the server.\n";
			$anvil->data->{relocate}{anvil_name}{$anvil_name}{candidate} = 1;
			$candidate_count++;
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
				"relocate::anvil_name::${anvil_name}:candidate" => $anvil->data->{relocate}{anvil_name}{$anvil_name}{candidate}, 
				candidate_count                           => $candidate_count, 
			}});
		}
		else
		{
			#print " \\- [ Note ] - This node can NOT host this server!\n";
			$anvil->data->{relocate}{anvil_name}{$anvil_name}{candidate} = 0;
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
				"relocate::anvil_name::${anvil_name}:candidate" => $anvil->data->{relocate}{anvil_name}{$anvil_name}{candidate}, 
			}});
		}
	}
	
	if (not $candidate_count)
	{
		print "[ Error ] - There are no other Anvil! nodes with sufficient resources to run this node!\n";
		$anvil->nice_exit({exit_code => 1});
	}
	my $index = 1;
	print "Target Anvil! nodes:\n";
	foreach my $anvil_name (sort {$a cmp $b} keys %{$anvil->data->{relocate}{anvil_name}})
	{
		my $anvil_uuid        = $anvil->data->{relocate}{anvil_name}{$anvil_name}{anvil_uuid};
		my $anvil_description = $anvil->data->{anvils}{anvil_name}{$anvil_name}{anvil_description};
		my $candidate         = $anvil->data->{relocate}{anvil_name}{$anvil_name}{candidate};
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			"s1:anvil_name"        => $anvil_name, 
			"s2:anvil_uuid"        => $anvil_uuid, 
			"s3:anvil_description" => $anvil_description, 
			"s4:candidate"         => $candidate, 
		}});
		if ($candidate)
		{
			print $index." - ".$anvil_name." - ".$anvil_description."\n";
			print " |- CPU Cores: [".$anvil->data->{relocate}{anvil_name}{$anvil_name}{available_cores}."], free RAM: [".$anvil->Convert->bytes_to_human_readable({'bytes' => $anvil->data->{relocate}{anvil_name}{$anvil_name}{available_ram}})."]\n";
			foreach my $storage_group_name (sort {$a cmp $b} keys %{$anvil->data->{relocate}{anvil_name}{$anvil_name}{storage_group}})
			{
				my $free_size = $anvil->data->{relocate}{anvil_name}{$anvil_name}{storage_group}{$storage_group_name}{free_size};
				if ($free_size > $anvil->data->{relocate}{needed_storage})
				{
					print " |- Candidate storage group: [".$storage_group_name."], free space: [".$anvil->Convert->bytes_to_human_readable({'bytes' => $free_size})."]\n";
				}
				else
				{
					print " |- Insufficient space on storage group: [".$storage_group_name."], free space: [".$anvil->Convert->bytes_to_human_readable({'bytes' => $free_size})."]\n";
				}
			}
			$index++;
		}
		else
		{
			print "X - ".$anvil_name." - ".$anvil_description."\n";
			print " |- Insufficient resources.\n";
		}
	}
	
	return(0);
}

sub ask_which_server
{
	my ($anvil, $terminal) = @_;
	
	my $retry = 0;
	while(1)
	{
		print $terminal->Tputs('cl');
		$anvil->Database->get_anvils({debug => 2});
		$anvil->Database->get_servers({debug => 2});
		my $default_server_uuid = $anvil->data->{switches}{server_uuid};
		my $server_count        = keys %{$anvil->data->{servers}{server_name}};
		my $count_length        = length($server_count);
		my $server_array        = [];
		my $longest_server_name = $anvil->data->{anvils}{longest_anvil_name};
		my $longest_anvil_name  = $anvil->data->{anvils}{longest_anvil_name};
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			default_server_uuid => $default_server_uuid,
			server_count        => $server_count, 
			count_length        => $count_length, 
			longest_server_name => $longest_server_name, 
			longest_anvil_name  => $longest_anvil_name, 
		}});
		
		# -=] Server Relocation Menu
		my $index = 0;
		print $anvil->Words->string({key => "job_0530"})."\n";
		foreach my $server_name (sort {$a cmp $b} keys %{$anvil->data->{servers}{server_name}})
		{
			my $server_uuid = $anvil->data->{servers}{server_name}{$server_name}{server_uuid};
			my $anvil_uuid  = $anvil->data->{servers}{server_uuid}{$server_uuid}{server_anvil_uuid};
			my $anvil_name  = $anvil->data->{anvils}{anvil_uuid}{$anvil_uuid}{anvil_name};
			my $say_number  = sprintf("%-${count_length}s", ($index + 1));
			my $dash        = $server_uuid eq $default_server_uuid ? "=" : "-";
			print " ".$dash." ".$say_number." ".sprintf("%-${longest_server_name}s", $server_name)." (uuid: [".$server_uuid."] on: [".$anvil_name."]\n";
			$server_array->[$index] = $server_uuid;
			$index++;
		}
		
		if ($retry)
		{
			# Please enter the a valid server name, server UUID or the index number of the server you want to relocate.
			print $anvil->Words->string({key => "job_0472"})."\n";
		}
		my $default_server = $default_server_uuid ? $anvil->data->{servers}{server_uuid}{$default_server_uuid}{server_name} : "";
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			default_server_uuid => $default_server_uuid,
			default_server      => $default_server, 
		}});
		print $anvil->Words->string({key => "job_0529", variables => { server => $default_server }})."\n\n";
		
		my $question_line = $retry ? $index + 3 : $index + 2;
		print $terminal->Tgoto('cm', 0, $question_line)."? ";
		my $answer = <STDIN>;
		chomp $answer;
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { answer => $answer }});
		
		# If the answer was a number, verify it matches
		$anvil->data->{relocate}{server_uuid} = "" if not defined $anvil->data->{relocate}{server_uuid};
		$anvil->data->{relocate}{server_name} = "" if not defined $anvil->data->{relocate}{server_name};
		if (not $answer)
		{
			if ($default_server_uuid)
			{
				$anvil->data->{relocate}{server_uuid} = $default_server_uuid;
				$anvil->data->{relocate}{server_name} = $anvil->data->{servers}{server_uuid}{$default_server_uuid}{server_name};
				$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
					"relocate::server_uuid" => $anvil->data->{relocate}{server_uuid},
					"relocate::server_name" => $anvil->data->{relocate}{server_name},
				}});
			}
			else
			{
				$retry = 1;
				$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { retry => $retry }});
				next;
			}
		}
		elsif ($answer =~ /^\d$/)
		{
			if (exists $server_array->[($answer - 1)])
			{
				my $server_uuid = $server_array->[($answer - 1)];
				$anvil->data->{relocate}{server_uuid} = $server_uuid;
				$anvil->data->{relocate}{server_name} = $anvil->data->{servers}{server_uuid}{$server_uuid}{server_name};
				$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
					"relocate::server_uuid" => $anvil->data->{relocate}{server_uuid},
					"relocate::server_name" => $anvil->data->{relocate}{server_name},
				}});
			}
			else
			{
				$retry = 1;
				$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { retry => $retry }});
				next;
			}
		}
		elsif ($anvil->Validate->uuid({uuid => $answer}))
		{
			my $server_uuid = $answer;
			if (exists $anvil->data->{servers}{server_uuid}{$server_uuid})
			{
				$anvil->data->{relocate}{server_uuid} = $server_uuid;
				$anvil->data->{relocate}{server_name} = $anvil->data->{servers}{server_uuid}{$server_uuid}{server_name};
				$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
					"relocate::server_uuid" => $anvil->data->{relocate}{server_uuid},
					"relocate::server_name" => $anvil->data->{relocate}{server_name},
				}});
			}
			else
			{
				$retry = 1;
				$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { retry => $retry }});
				next;
			}
		}
		elsif (exists $anvil->data->{servers}{server_name}{$answer})
		{
			$anvil->data->{relocate}{server_uuid} = $anvil->data->{servers}{server_name}{$answer}{server_uuid};
			$anvil->data->{relocate}{server_name} = $answer;
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
				"relocate::server_uuid" => $anvil->data->{relocate}{server_uuid},
				"relocate::server_name" => $anvil->data->{relocate}{server_name},
			}});
		}
		else
		{
			$retry = 1;
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { retry => $retry }});
			next;
		}
		last if $anvil->data->{relocate}{server_name};
	}
	
	return(0);
}

sub load_job
{
	my ($anvil) = @_;
	
	$anvil->Job->clear({
		debug    => 2,
		job_uuid => $anvil->data->{switches}{'job-uuid'}, 
	});
	$anvil->Job->get_job_details({
		debug    => 2,
		job_uuid => $anvil->data->{switches}{'job-uuid'}, 
	});
	
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		'jobs::job_data' => $anvil->data->{jobs}{job_data}, 
	}});
	foreach my $line (split/\n/, $anvil->data->{jobs}{job_data})
	{
		my ($variable, $value) =  ($line =~ /^(.*)=(.*)$/);
		   $value              =~ s/^"(.*)\"/$1/;
		   $value              =~ s/^'(.*)\'/$1/;
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			's1:line'     => $line, 
			's2:variable' => $variable, 
			's3:value'    => $value, 
		}});
		
		$anvil->data->{switches}{$variable} = $value;
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			"switches::${variable}" => $anvil->data->{switches}{$variable}, 
		}});
	}
	
	$anvil->Job->update_progress({
		progress         => 1,
		job_picked_up_by => $$, 
		job_picked_up_at => time, 
		message          => "message_0350", 
		log_level        => 2, 
		'print'          => 1,
	});
	
	return(0);
}
