#!/usr/bin/perl
# 
# This prints JSON formated data reporting the status of an file systems on nodes and DR hosts.
# 

use strict;
use warnings;
use Anvil::Tools;
use Data::Dumper;
use JSON;

$| = 1;

my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

my $anvil = Anvil::Tools->new();

$anvil->Get->switches;

$anvil->Database->connect;
$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 2, secure => 0, key => "log_0132"});
if (not $anvil->data->{sys}{database}{connections})
{
	# No databases, exit.
	$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 0, 'print' => 1, priority => "err", key => "error_0003"});
	$anvil->nice_exit({exit_code => 1});
}

# Read in any CGI variables, if needed.
$anvil->Get->cgi();

$anvil->Database->get_hosts();
$anvil->Database->get_anvils();

print $anvil->Template->get({file => "shared.html", name => "json_headers", show_name => 0})."\n";

my $hash       = { file_systems => [] };
my $anvil_uuid = "";
if ($anvil->data->{cgi}{anvil_uuid}{value})
{
	$anvil_uuid = $anvil->data->{cgi}{anvil_uuid}{value};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { anvil_uuid => $anvil_uuid }});
}
elsif ($anvil->data->{switches}{'anvil-uuid'})
{
	$anvil_uuid = $anvil->data->{switches}{'anvil-uuid'};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { anvil_uuid => $anvil_uuid }});
}
if ((not $anvil_uuid) or (not exists $anvil->data->{anvils}{anvil_uuid}{$anvil_uuid}))
{
	$anvil->data->{anvil_status}{anvil_name} = "!!invalid!anvil_uuid!!";
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 'anvil_status::anvil_name' => $anvil->data->{anvil_status}{anvil_name} }});
}
else
{
	my $node1_uuid = $anvil->data->{anvils}{anvil_uuid}{$anvil_uuid}{anvil_node1_host_uuid};
	my $node2_uuid = $anvil->data->{anvils}{anvil_uuid}{$anvil_uuid}{anvil_node2_host_uuid};
	my $dr1_uuid   = $anvil->data->{anvils}{anvil_uuid}{$anvil_uuid}{anvil_dr1_host_uuid};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		node1_uuid => $node1_uuid,
		node2_uuid => $node2_uuid, 
		dr1_uuid   => $dr1_uuid, 
	}});
	
	my $query = "
SELECT 
    a.host_uuid, 
    a.host_name, 
    b.scan_filesystem_mount_point, 
    b.scan_filesystem_size, 
    b.scan_filesystem_used 
FROM 
    hosts a, 
    scan_filesystems b 
WHERE 
    a.host_uuid = b.scan_filesystem_host_uuid 
AND 
    (
        a.host_uuid = ".$anvil->Database->quote($node1_uuid)." 
    OR 
        a.host_uuid = ".$anvil->Database->quote($node2_uuid);
	if ($dr1_uuid)
	{
		$query .= "
    OR 
        a.host_uuid = ".$anvil->Database->quote($dr1_uuid);
	}
	$query .= "
    ) 
ORDER BY 
    a.host_name ASC, 
    b.scan_filesystem_mount_point DESC
;";
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { query => $query }});
	my $results = $anvil->Database->query({query => $query, source => $THIS_FILE, line => __LINE__});
	my $count   = @{$results};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		results => $results, 
		count   => $count, 
	}});
	foreach my $row (@{$results})
	{
		my $host_uuid   = $row->[0];
		my $host_name   = $row->[1];
		my $mount_point = $row->[2];
		my $size        = $row->[3]; 
		my $used        = $row->[4]; 
		my $free        = $size - $used;
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			host_uuid   => $host_uuid, 
			host_name   => $host_name, 
			mount_point => $mount_point, 
			size        => $anvil->Convert->add_commas({number => $size})." (".$anvil->Convert->bytes_to_human_readable({'bytes' => $size}).")",, 
			used        => $anvil->Convert->add_commas({number => $used})." (".$anvil->Convert->bytes_to_human_readable({'bytes' => $used}).")",, 
			free        => $anvil->Convert->add_commas({number => $free})." (".$anvil->Convert->bytes_to_human_readable({'bytes' => $free}).")",, 
		}});
		
		$anvil->data->{raw}{file_systems}{$mount_point}{nodes}{$host_uuid}{host_name} = $host_name;
		$anvil->data->{raw}{file_systems}{$mount_point}{nodes}{$host_uuid}{total}     = $size;
		$anvil->data->{raw}{file_systems}{$mount_point}{nodes}{$host_uuid}{free}      = $free;
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			"raw::file_systems::${mount_point}::nodes::${host_uuid}::host_name" => $anvil->data->{raw}{file_systems}{$mount_point}{nodes}{$host_uuid}{host_name}, 
			"raw::file_systems::${mount_point}::nodes::${host_uuid}::total"     => $anvil->Convert->add_commas({number => $anvil->data->{raw}{file_systems}{$mount_point}{nodes}{$host_uuid}{total}})." (".$anvil->Convert->bytes_to_human_readable({'bytes' => $anvil->data->{raw}{file_systems}{$mount_point}{nodes}{$host_uuid}{total}}).")",, 
			"raw::file_systems::${mount_point}::nodes::${host_uuid}::free"      => $anvil->Convert->add_commas({number => $anvil->data->{raw}{file_systems}{$mount_point}{nodes}{$host_uuid}{free}})." (".$anvil->Convert->bytes_to_human_readable({'bytes' => $anvil->data->{raw}{file_systems}{$mount_point}{nodes}{$host_uuid}{free}}).")",, 
		}});
	}
	
	foreach my $mount_point (sort {$a cmp $b} keys %{$anvil->data->{raw}{file_systems}})
	{
		# Make a FS hash, which will be pushed into the file_systems array in the response body.
		my $file_system = {};

		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { mount_point => $mount_point }});
		   $file_system->{mount_point} = $mount_point;
		   $file_system->{nodes}       = [];
		my $nodes               = [$node1_uuid, $node2_uuid];
		if ($dr1_uuid)
		{
			push @{$nodes}, $dr1_uuid;
		}
		foreach my $host_uuid (@{$nodes})
		{
			my $host_name = $anvil->data->{hosts}{host_uuid}{$host_uuid}{host_name};
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
				host_uuid => $host_uuid,
				host_name => $host_name, 
			}});
			if (exists $anvil->data->{raw}{file_systems}{$mount_point}{nodes}{$host_uuid})
			{
				push @{$file_system->{nodes}}, {
					host_uuid  => $host_uuid, 
					host_name  => $anvil->data->{raw}{file_systems}{$mount_point}{nodes}{$host_uuid}{host_name},
					is_mounted => 1,
					total      => $anvil->data->{raw}{file_systems}{$mount_point}{nodes}{$host_uuid}{total},
					free       => $anvil->data->{raw}{file_systems}{$mount_point}{nodes}{$host_uuid}{free},
				}
			}
			else
			{
				push @{$file_system->{nodes}}, {
					host_uuid  => $host_uuid, 
					host_name  => $anvil->data->{hosts}{host_uuid}{$host_uuid}{host_name},
					is_mounted => 0,
					total      => 0,
					free       => 0,
				}
			}
		}

		# Push the filled FS has into the response body's file_systems array.
		push(@{$hash->{file_systems}}, $file_system);
	}
}

print JSON->new->utf8->encode($hash)."\n";
