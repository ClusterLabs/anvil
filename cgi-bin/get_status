#!/usr/bin/perl
# 
# This prints JSON formated data reporting the status of an Anvil!'s nodes.
# 

use strict;
use warnings;
use Anvil::Tools;
use Data::Dumper;
use JSON;

$| = 1;

my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

my $anvil = Anvil::Tools->new();

$anvil->Get->switches;

$anvil->Database->connect;
$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 2, secure => 0, key => "log_0132"});
if (not $anvil->data->{sys}{database}{connections})
{
	# No databases, exit.
	$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 0, 'print' => 1, priority => "err", key => "error_0003"});
	$anvil->nice_exit({exit_code => 1});
}

# Read in any CGI variables, if needed.
$anvil->Get->cgi();

$anvil->Database->get_hosts();
$anvil->Database->get_anvils();

print $anvil->Template->get({file => "shared.html", name => "json_headers", show_name => 0})."\n";

my $hash       = {};
my $anvil_uuid = "";
if ($anvil->data->{cgi}{anvil_uuid}{value})
{
	$anvil_uuid = $anvil->data->{cgi}{anvil_uuid}{value};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { anvil_uuid => $anvil_uuid }});
}
elsif ($anvil->data->{switches}{'anvil-uuid'})
{
	$anvil_uuid = $anvil->data->{switches}{'anvil-uuid'};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { anvil_uuid => $anvil_uuid }});
}
if ((not $anvil_uuid) or (not exists $anvil->data->{anvils}{anvil_uuid}{$anvil_uuid}))
{
	$anvil->data->{anvil_status}{anvil_name} = "!!invalid!anvil_uuid!!";
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 'anvil_status::anvil_name' => $anvil->data->{anvil_status}{anvil_name} }});
}
else
{
	my $node1_uuid = $anvil->data->{anvils}{anvil_uuid}{$anvil_uuid}{anvil_node1_host_uuid};
	my $node2_uuid = $anvil->data->{anvils}{anvil_uuid}{$anvil_uuid}{anvil_node2_host_uuid};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		node1_uuid => $node1_uuid,
		node2_uuid => $node2_uuid, 
	}});
	
	# For each node, check to see if it's "online" and, if so, if the node is in the cluster.
	$anvil->Database->get_hosts_info();
	
	# Read in the 
	my $node1_status    = $anvil->data->{hosts}{host_uuid}{$node1_uuid}{host_status};
	my $node1_host_name = $anvil->data->{hosts}{host_uuid}{$node1_uuid}{short_host_name};
	my $node2_status    = $anvil->data->{hosts}{host_uuid}{$node2_uuid}{host_status};
	my $node2_host_name = $anvil->data->{hosts}{host_uuid}{$node2_uuid}{short_host_name};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		node1_status    => $node1_status,
		node1_host_name => $node1_host_name, 
		node2_status    => $node2_status, 
		node2_host_name => $node2_host_name, 
	}});
	
	# Array index 0 is node 1, index 1 is node 2.
	$hash->{anvil_state} = "optimal"; 
	$hash->{nodes}->[0]  = {
		host_uuid        =>  $node1_uuid,
		'state'          => "offline",
		state_percent    => 0,
		state_message    => "message_0222,!!host_name!".$node1_host_name."!!",
		maintenance_mode => 'undefined',
	};
	$hash->{nodes}->[1]  = {
		host_uuid        =>  $node2_uuid,
		'state'          => "offline",
		state_percent    => 0,
		state_message    => "message_0222,!!host_name!".$node2_host_name."!!",
		maintenance_mode => 'undefined',
	};
	
	foreach my $i (0..1)
	{
		my $host_uuid       = $hash->{nodes}->[$i]->{host_uuid};
		my $short_host_name = $anvil->data->{hosts}{host_uuid}{$host_uuid}{short_host_name};
		my $host_status     = $anvil->data->{hosts}{host_uuid}{$host_uuid}{host_status};
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			's1:short_host_name' => $short_host_name,
			's2:host_uuid'       => $host_uuid, 
			's3:host_status'     => $host_status, 
		}});
		
		# If the node is not "online", nothing else matters.
		next if $host_status ne "online";
		
		my $query = "
SELECT 
    scan_cluster_node_in_ccm, 
    scan_cluster_node_crmd_member, 
    scan_cluster_node_cluster_member, 
    scan_cluster_node_maintenance_mode 
FROM 
    scan_cluster_nodes 
WHERE 
    scan_cluster_node_host_uuid = ".$anvil->Database->quote($host_uuid)."
";
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { query => $query }});
		my $results = $anvil->Database->query({query => $query, source => $THIS_FILE, line => __LINE__});
		my $count   = @{$results};
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			results => $results, 
			count   => $count, 
		}});
		
		if (not $count)
		{
			# Weird, looks like this host isn't a node.
			next;
		}
		foreach my $row (@{$results})
		{
			# How online is it?
			my $scan_cluster_node_in_ccm           = $row->[0];
			my $scan_cluster_node_crmd_member      = $row->[1];
			my $scan_cluster_node_cluster_member   = $row->[2];
			my $scan_cluster_node_maintenance_mode = $row->[3];
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
				scan_cluster_node_in_ccm           => $scan_cluster_node_in_ccm, 
				scan_cluster_node_crmd_member      => $scan_cluster_node_crmd_member, 
				scan_cluster_node_cluster_member   => $scan_cluster_node_cluster_member, 
				scan_cluster_node_maintenance_mode => $scan_cluster_node_maintenance_mode, 
			}});
			
			# Ensure the maintenance_mode is set to a value that can be converted to JSON booleans.
			$hash->{nodes}->[$i]->{maintenance_mode} = $scan_cluster_node_maintenance_mode ? \1 : \0;
			if ($scan_cluster_node_cluster_member)
			{
				$hash->{nodes}->[$i]->{'state'}       = "online";
				$hash->{nodes}->[$i]->{state_percent} = 100;
				$hash->{nodes}->[$i]->{state_message} = "message_0223,!!host_name!".$node2_host_name."!!",
			}
			elsif ($scan_cluster_node_crmd_member)
			{
				$hash->{nodes}->[$i]->{'state'}       = "crmd";
				$hash->{nodes}->[$i]->{state_percent} = 75;
				$hash->{nodes}->[$i]->{state_message} = "message_0224,!!host_name!".$node2_host_name."!!",
			}
			elsif ($scan_cluster_node_in_ccm)
			{
				$hash->{nodes}->[$i]->{'state'}       = "in_ccm";
				$hash->{nodes}->[$i]->{state_percent} = 50;
				$hash->{nodes}->[$i]->{state_message} = "message_0225,!!host_name!".$node2_host_name."!!",
			}
			else
			{
				$hash->{nodes}->[$i]->{'state'}       = "booted";
				$hash->{nodes}->[$i]->{state_percent} = 25;
				$hash->{nodes}->[$i]->{state_message} = "message_0226,!!host_name!".$node2_host_name."!!",
			}
			
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
				"hash->{nodes}->[".$i."]->{state}"            => $hash->{nodes}->[$i]->{'state'}, 
				"hash->{nodes}->[".$i."]->{state_percent}"    => $hash->{nodes}->[$i]->{state_percent}, 
				"hash->{nodes}->[".$i."]->{state_message}"    => $hash->{nodes}->[$i]->{state_message}, 
				"hash->{nodes}->[".$i."]->{maintenance_mode}" => $hash->{nodes}->[$i]->{maintenance_mode}, 
			}});
		}
	}
}

print JSON->new->utf8->encode($hash)."\n";
