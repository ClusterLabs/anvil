#!/usr/bin/perl
# 
# This prints JSON formated data reporting the status of CPUs.
# 

use strict;
use warnings;
use Anvil::Tools;
use Data::Dumper;
use JSON;

$| = 1;

my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

my $anvil = Anvil::Tools->new();

$anvil->Get->switches;

$anvil->Database->connect;
$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 2, secure => 0, key => "log_0132"});
if (not $anvil->data->{sys}{database}{connections})
{
	# No databases, exit.
	$anvil->Log->entry({source => $THIS_FILE, line => __LINE__, level => 0, 'print' => 1, priority => "err", key => "error_0003"});
	$anvil->nice_exit({exit_code => 1});
}

# Read in any CGI variables, if needed.
$anvil->Get->cgi();

$anvil->Database->get_hosts();
$anvil->Database->get_anvils();

print $anvil->Template->get({file => "shared.html", name => "json_headers", show_name => 0})."\n";

my $target     = $anvil->Get->short_host_name();
my $hash       = {};
my $anvil_uuid = "";
if ($anvil->data->{cgi}{anvil_uuid}{value})
{
	$anvil_uuid = $anvil->data->{cgi}{anvil_uuid}{value};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { anvil_uuid => $anvil_uuid }});
}
elsif ($anvil->data->{switches}{'anvil-uuid'})
{
	$anvil_uuid = $anvil->data->{switches}{'anvil-uuid'};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { anvil_uuid => $anvil_uuid }});
}
if ((not $anvil_uuid) or (not exists $anvil->data->{anvils}{anvil_uuid}{$anvil_uuid}))
{
	$anvil->data->{anvil_status}{anvil_name} = "!!invalid!anvil_uuid!!";
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 'anvil_status::anvil_name' => $anvil->data->{anvil_status}{anvil_name} }});
}
else
{
	my $node1_uuid = $anvil->data->{anvils}{anvil_uuid}{$anvil_uuid}{anvil_node1_host_uuid};
	my $node2_uuid = $anvil->data->{anvils}{anvil_uuid}{$anvil_uuid}{anvil_node2_host_uuid};
	my $dr1_uuid   = $anvil->data->{anvils}{anvil_uuid}{$anvil_uuid}{anvil_dr1_host_uuid};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		node1_uuid => $node1_uuid,
		node2_uuid => $node2_uuid, 
		dr1_uuid   => $dr1_uuid, 
	}});
	
	$hash->{cores}     = 0;
	$hash->{threads}   = 0;
	$hash->{allocated} = 0;
	
	# Do the query
	my $query = "
SELECT 
    a.host_uuid, 
    a.host_name, 
    b.scan_hardware_cpu_cores, 
    b.scan_hardware_cpu_threads 
FROM 
    hosts a, scan_hardware b 
WHERE 
    a.host_uuid = b.scan_hardware_host_uuid
AND 
    (
        a.host_uuid = ".$anvil->Database->quote($node1_uuid)." 
    OR 
        a.host_uuid = ".$anvil->Database->quote($node2_uuid);
	if ($dr1_uuid)
	{
		$query .= "
    OR 
        a.host_uuid = ".$anvil->Database->quote($dr1_uuid);
	}
	$query .= "
    ) 
ORDER BY 
    a.host_name ASC
;";
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { query => $query }});
	my $results = $anvil->Database->query({query => $query, source => $THIS_FILE, line => __LINE__});
	my $count   = @{$results};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		results => $results, 
		count   => $count, 
	}});
	foreach my $row (@{$results})
	{
		my $host_uuid                 = $row->[0];
		my $host_name                 = $row->[1];
		my $scan_hardware_cpu_cores   = $row->[2];
		my $scan_hardware_cpu_threads = $row->[3]; 
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			host_uuid                 => $host_uuid, 
			host_name                 => $host_name, 
			scan_hardware_cpu_cores   => $scan_hardware_cpu_cores, 
			scan_hardware_cpu_threads => $scan_hardware_cpu_threads, 
		}});
		
		if (not $hash->{cores})
		{
			$hash->{cores} = $scan_hardware_cpu_cores;
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 'hash->cores' => $hash->{cores} }});
		}
		elsif ($scan_hardware_cpu_cores < $hash->{cores})
		{
			$hash->{cores} = $scan_hardware_cpu_cores;
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 'hash->cores' => $hash->{cores} }});
		}
		if (not $hash->{threads})
		{
			$hash->{threads} = $scan_hardware_cpu_threads;
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 'hash->threads' => $hash->{threads} }});
		}
		elsif ($scan_hardware_cpu_threads < $hash->{threads})
		{
			$hash->{threads} = $scan_hardware_cpu_threads;
			$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 'hash->threads' => $hash->{threads} }});
		}
	}
	
	# Now get the servers from the Anvil!
	$query = "
SELECT 
    a.server_uuid, 
    a.server_name, 
    b.server_definition_xml 
FROM 
    servers a, 
    server_definitions b 
WHERE 
    a.server_uuid = b.server_definition_server_uuid 
AND 
    a.server_anvil_uuid = ".$anvil->Database->quote($anvil_uuid)."
;";
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { query => $query }});
	$results = $anvil->Database->query({query => $query, source => $THIS_FILE, line => __LINE__});
	$count   = @{$results};
	$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
		results => $results, 
		count   => $count, 
	}});
	foreach my $row (@{$results})
	{
		my $server_uuid           = $row->[0];
		my $server_name           = $row->[1];
		my $server_definition_xml = $row->[2];
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 
			's1:server_name'           => $server_name, 
			's2:server_uuid'           => $server_uuid, 
			's3:server_definition_xml' => $server_definition_xml, 
		}});
		
		$anvil->Server->parse_definition({
			server     => $server_name, 
			source     => "from_db",
			definition => $server_definition_xml, 
		});
		
		$hash->{allocated} += $anvil->data->{server}{$target}{$server_name}{from_db}{cpu}{total_cores};
		$anvil->Log->variables({source => $THIS_FILE, line => __LINE__, level => 2, list => { 'hash->allocated' => $hash->{allocated} }});
	}
	
}

print JSON->new->utf8->encode($hash)."\n";
